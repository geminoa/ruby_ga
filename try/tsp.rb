#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$:.unshift(File.dirname(File.expand_path(__FILE__)) + "/../")

require "ruby_ga"
require "pp"
require "fileutils"

# Configuration.
point_num = 30 
interval = 20
num_try = 100 # Number of trial.

conf = RubyGAConfig.new(
  unit_num=50,
  gene_size=nil,
  gene_var=(0..(point_num-1)).to_a,
  genes=[],
  fitness=nil,
  selection="roulette",
  mutation="inversion",
  crossover="uniform",
  #crossover="stitch",
  crossoverProbability=0.5,
  mutationProbability=0.3,
  desc="TSP test"
)

$cities = [[3, -23],
           [4, -23],
           [6, 2],
           [-24, 23],
           [16, 11],
           [2, -19],
           [14, -24],
           [24, -10],
           [-19, -8],
           [4, 9],
           [10, -12],
           [-2, 14],
           [0, 24],
           [17, -21],
           [-17, -10],
           [-6, 19],
           [14, -17],
           [24, -8],
           [5, -17],
           [-11, 13],
           [2, -10],
           [1, -15],
           [-13, -16],
           [-18, -5],
           [14, 12],
           [9, 22],
           [-9, -9],
           [0, 5],
           [6, -11],
           [15, -3]]

# Contains points on which the traveling salesman visits.
# Each of point is generated by using generate_points method later.
# This must be global variable because it's reffered from the evaluation function.
$points = []

# Setup directory for gnuplot related files.
$datdir = File.dirname(File.expand_path(__FILE__)) + "/dat/tsp"
if !Dir.exist?($datdir)
  FileUtils.mkdir_p($datdir)
end
  
# The evaluation function for TSP.
def sum_distances(gene_ary)
  sum = 0.0
  score = 0.0
  i = 0
  if (gene_ary.size == gene_ary.uniq.size)
    while(i < gene_ary.size - 1)
      dist = distance($points[gene_ary[i]], $points[gene_ary[i+1]])
      #puts "points: #{$points[gene_ary[i]]}, #{$points[gene_ary[i+1]]}"
      #puts "dist: #{dist}"
      sum += dist
      i += 1
    end
    score = (1.0 / sum) * 1000000
  end

  #puts "sum: #{sum}, score: #{score}"
  return score
end

# Calculate distance between two points in any size of dimension.
# The two points are in same dimension.
def distance(p1, p2)
  if p1.size != p2.size
    raise "dimension of the points is not same!"
  end
  sum = 0.0
  p1.size.times do |i|
    sum += (p1[i] - p2[i])**2
  end
  #return Math::sqrt(sum)
  return sum
end

# Generate points in a random manner on which the traveling salesman visits.
# Currently, only two-dimensional point is supported.
# @param pnum [Integer] Number of points.
# @param xrange [Integer] Range of x-axis on the field.
# @param yrange [Integer] Range of y-axis on the field.
# @param uniq [Boolean] Flag to indicate to allow some of points are placed on the same coordinate point.
# @return points [Array] Set of the points.
def generate_points(pnum=20, xrange=50, yrange=50, uniq=true)
  points = []
  pnum.times do |i|
    points << [rand(xrange) - xrange/2, rand(yrange) - yrange/2]
  end

  if uniq == true
    points = points.uniq
    while(points.size < pnum)
      points << [rand(xrange) - xrange/2, rand(yrange) - yrange/2]
    end
  end
  return points
end

$points = cities
#$points = generate_points(point_num)

def main(conf, num_try, interval)
  genes = []
  conf.unit_num.times{|i|
    genes << conf.generate_gene(cond="tsp")
  }
  conf.genes = genes
  fun = method(:sum_distances)
  conf.fitness = fun
  po = Population.new conf

  gnuplot_str = "set xrange [-100:100]\nset yrange[-100:100]\n"
  num_try.times do |num|
    i = num + 1
    po.simple_ga(conf.fitness, conf.selection, conf.mutation)

    puts "average fitness [#{i}]: #{po.average_fitness(fun)}"

    #p po.units.size
    if (i == 1) or (i % interval == 0)
      #puts "avg=#{po.average_fitness(conf.fitness)}, dev=#{po.deviation_fitness(conf.fitness)}"
      #puts "best=#{po.elite_selection(conf.fitness).fitness(conf.fitness)}"
      open("#{$datdir}/points#{i}.dat", "w+"){|f|
        best_unit = po.elite_selection(conf.fitness)
        #p best_unit.gene
        best_unit.gene.each do |idx|
          point = $points[best_unit.gene[idx]]
          f.write "#{point[0]} #{point[1]}\n"
        end
        f.write "#{$points[best_unit.gene[0]][0]} #{$points[best_unit.gene[0]][1]}\n"  # 元の位置に戻るように最初の点を追加する
      }

      gnuplot_str += 'plot "points' + i.to_s + '.dat" with linespoints' + "\n"
      gnuplot_str += "pause 1\n"
    end
  end
  open("#{$datdir}/plot.gpl", "w+"){|f| f.write(gnuplot_str)}
end

main(conf, num_try, interval)
